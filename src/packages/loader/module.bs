function createContext(sModuleUrl, sModuleKey) {
    return {
        "meta": {
            // ключ модуля (название корневой директории)
            "module_key": sModuleKey,
            // абсолютный путь к корневой директории модуля
            "module_url": sModuleUrl,
            // module.bs открытый через OpenCodeLibrary()
            "module_library": null
        }
    };
}

function open(oModuleContext) {
    function loadModuleMain(oModuleContext) {
        var sModuleMainUrl = std.fu.resolve(oModuleContext.meta.module_url, "module.bs");
        if (std.fu.isNotExistsFile(sModuleMainUrl)) {
            ams.log.error("missing module.bs file");
            throw "Corupt module structure";
        }
    
        var l1ModuleMain = ams.utils.util.safeOpenCodeLib(sModuleMainUrl);
        if (l1ModuleMain === undefined) {
            ams.log.error("invalid module.bs file");
            throw "Corupt module structure";
        }
    
        return l1ModuleMain;
    }

    function readConfig(oModuleContext) {
        var sConfigMethodName = "config";
    
        if (ams.utils.util.objectNotHasMethod(oModuleContext.meta.module_library, sConfigMethodName)) {
            ams.log.error("module.bs has no " + sConfigMethodName + "() method");
            throw "Corupt module structure";
        }
    
        try {
            var oModuleConfig = CallObjectMethod(oModuleContext.meta.module_library, sConfigMethodName, []);
        } catch (err) {
            ams.log.error("cannot call " + sConfigMethodName + "() method: " + err);
            throw "Corupt module structure";
        }
    
        ams.log.debug("info loaded { Name = " + oModuleConfig.name + "; Version = " + oModuleConfig.version + " }");
    
        return oModuleConfig;
    }

    var l1ModuleMain = loadModuleMain(oModuleContext);
    oModuleContext.meta.SetProperty("module_library", l1ModuleMain);

    var oModuleConfig = readConfig(oModuleContext);
    oModuleContext.SetProperty("config", oModuleConfig);
}

function loadLibraryComponent(oModuleContext) {
    // RegisterCodeLibrary("x-local://wt/web/ams/modules/logm/library/main/library.bs");
    // logm.init();

    // var logger = logm.getLogger("test", logm.TRACE);
    // logger.trace("hui");
    // logger.debug("hui");
    // logger.info("hui");
    // logger.warn("hui");
    // logger.error("hui");
    // logger.fatal("hui");

    // RegisterCodeLibrary("x-local://wt/web/ams/modules/logm/library/main/library.bs");
    // logm.init();
}

function loadServiceComponent(oModuleContext) {
    function pullStructure(build) {
        var obj = {};
        var sPlainPackageName;
        for (sPlainPackageName in build.structure) {
            setDeepStructureLib(obj, sPlainPackageName, build.structure.GetProperty(sPlainPackageName))
        }
        return obj;
    }
    
    function setDeepStructureLib(obj, path, value) {
        var keys = path.split('.');
        var current = obj;
        var tmp = current;
    
        var key;
        for (var i = 0; i < keys.length; i++) {
            key = keys[i];
    
            if (i === keys.length - 1) {
                current.SetProperty(key, value);
            } else {
                tmp = current.GetOptProperty(key);
    
                if (tmp === undefined) {
                    tmp = {};
                    current.SetProperty(key, tmp);
                } else if (DataType(tmp) !== 'object') {
                    throw 'wtf'
                } else if (ObjectType(tmp) !== 'JsObject') {
                    throw 'Attempt to write to not JsObject'
                }
    
                current = tmp;
            }
        }
    }


    var sComponentDirUrl = UrlAppendPath(oModuleContext.meta.module_url, "service");
    if (!PathIsDirectory(UrlToFilePath(sComponentDirUrl))) {
        ams.log.trace("module({1})::service not found, skip loading service component", [oModuleContext.meta.module_key]);
        return;
    }

    var sComponentMainUrl = UrlAppendPath(sComponentDirUrl, "component.bs");
    var oComponentMainLib = OpenCodeLib(sComponentMainUrl);

    var build = CallObjectMethod(oComponentMainLib, "build", [AbsoluteUrl(sComponentDirUrl)]);

    var oServiceStructure = pullStructure(build)
    oModuleContext.SetProperty("service", oServiceStructure)
    
    ams.log.trace("module({1})::service successfully registered", [oModuleContext.meta.module_key]);
}

function loadApiComponent(oModuleContext) {
    function registerApiEndpoints(build) {
        ams.log.trace("register endpoints...")
        var oRoot = ams.web.router.createTrieNode();
    
        var endpoint;  // for@2
        var endpoints; // for@1
        var l1ApiLib;  // for@1
        for (l1ApiLib in build.endpoints) { // for@1
            endpoints = getEndpoints(l1ApiLib);

            for (endpoint in endpoints) {   // for@2
                ams.web.router.addRoute(oRoot, endpoint, l1ApiLib);
            }
        }

        return oRoot;
    }

    function getEndpoints(l1ApiLib) {
        ams.log.trace("collect endpoints from {1}", [l1ApiLib.Form.Url]);
    
        if (ams.utils.util.objectNotHasMethod(l1ApiLib, "endpoints")) {
            ams.log.error("{1} has no endpoints() method");
            throw "Corupt api structure";
        }
    
        try {
            var endpoints = CallObjectMethod(l1ApiLib, "endpoints", []);
            ams.log.trace("collected successfully");
        } catch (err) {
            ams.log.error("endpoints() exits with error: " + err);
            throw "Failed to endpoints()";
        }

        return endpoints;
    }


    var sComponentDirUrl = UrlAppendPath(oModuleContext.meta.module_url, "api");
    if (!PathIsDirectory(UrlToFilePath(sComponentDirUrl))) {
        ams.log.trace("module({1})::api not found, skip loading api component", [oModuleContext.meta.module_key]);
        return;
    }

    var sComponentMainUrl = UrlAppendPath(sComponentDirUrl, "component.bs");
    var oComponentMainLib = OpenCodeLib(sComponentMainUrl);

    var build = CallObjectMethod(oComponentMainLib, "build", [AbsoluteUrl(sComponentDirUrl)]);

    var trie = registerApiEndpoints(build);
    var api = { "trie": trie };
    oModuleContext.SetProperty("api", api);
    
    ams.log.trace("module({1})::api successfully registered", [oModuleContext.meta.module_key]);
}

function loadWebComponent(oModuleContext) {
    var sComponentDirUrl = UrlAppendPath(oModuleContext.meta.module_url, "web");
    if (!PathIsDirectory(UrlToFilePath(sComponentDirUrl))) {
        ams.log.trace("module({1})::web not found, skip loading web component", [oModuleContext.meta.module_key]);
        return;
    }

    var sComponentMainUrl = UrlAppendPath(sComponentDirUrl, "component.bs");
    var oComponentMainLib = OpenCodeLib(sComponentMainUrl);

    var build = CallObjectMethod(oComponentMainLib, "build", [AbsoluteUrl(sComponentDirUrl)]);

    var oWebConfig = { "config": build.config };
    oModuleContext.SetProperty("web", oWebConfig)
    
    ams.log.trace("module({1})::web successfully registered", [oModuleContext.meta.module_key]);
}


function callOnInstall(oModuleContext) {
    var sMethodName = "onInstall";

    ams.log.trace("execute " + sMethodName + "()");

    // if (_ams.helper.env.moduleIsInstalled(oModuleContext)) {
    //     ams.log.trace("module already installed, skip executing");
    //     return;
    // }

    if (ams.utils.util.objectNotHasMethod(oModuleContext.meta.module_library, sMethodName)) {
        ams.log.trace("module.bs has no " + sMethodName + "() method, skip executing");
        return;
    }

    try {
        CallObjectMethod(oModuleContext.meta.module_library, sMethodName, []);
        ams.log.trace("" + sMethodName + "() executed successfully");
    } catch (err) {
        ams.log.error("" + sMethodName + "() exits with error: " + err);
        throw "Failed to " + sMethodName + "()";
    }
}

function callOnUninstall(oModuleContext) {
    var sMethodName = "onUninstall";

    ams.log.trace("execute " + sMethodName + "()");

    // if (_ams.helper.env.moduleIsInstalled(oModuleContext)) {
    //     ams.log.trace("module already installed, skip executing");
    //     return;
    // }

    if (ams.utils.util.objectNotHasMethod(oModuleContext.meta.module_library, sMethodName)) {
        ams.log.trace("module.bs has no " + sMethodName + "() method, skip executing");
        return;
    }

    try {
        CallObjectMethod(oModuleContext.meta.module_library, sMethodName, []);
        ams.log.trace("" + sMethodName + "() executed successfully");
    } catch (err) {
        ams.log.error("" + sMethodName + "() exits with error: " + err);
        throw "Failed to " + sMethodName + "()";
    }
}

function callOnInit(oModuleContext) {
    var sMethodName = "onInit";

    ams.log.trace("execute " + sMethodName + "()");

    if (ams.utils.util.objectNotHasMethod(oModuleContext.meta.module_library, sMethodName)) {
        ams.log.trace("module.bs has no " + sMethodName + "() method, skip executing");
        return;
    }

    try {
        CallObjectMethod(oModuleContext.meta.module_library, sMethodName, []);
        ams.log.trace("" + sMethodName + "() executed successfully");
    } catch (err) {
        ams.log.error("" + sMethodName + "() exits with error: " + err);
        throw "Failed to " + sMethodName + "()";
    }
}

function lock(oModuleContext) {

}
