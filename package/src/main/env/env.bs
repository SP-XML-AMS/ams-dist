var packages = {
    ams: null,
    module: null
}

var base_dir_url = null;
var dist_dir_url = null;

var data_dir_url = null;
var modules_dir_url = null;

var lock_ams_url = null;
var lock_module_url = null;

var ams_wrapper_version = null;
var ams_dist_version = null;

var lock = {
    ams: null,   // lock-ams.json
    module: null // lock-module.json
}

/**
 * 
 * @param bReloadFromDisk 
 */
function getLockedAmsPackages() {
    return loadLockedPackageFromFile("ams", lock_ams_url);
}

/**
 * 
 * @param bReloadFromDisk 
 */
function getLockedModulePackages() {
    return getLockedPackages("module", bReloadFromDisk);
}

/**
 * 
 * @param sName 
 * @param bReloadFromDisk 
 */
function loadLockedPackageFromFile(sName, sLockFileUrl) {
    if (std.lib.fu.isExistsFile(sLockFileUrl)) {
        try {
            lock.SetProperty(sName, std.lib.json.parse(std.lib.fu.loadAsText(sLockFileUrl)));
        } catch (err) {
            throw "Corrupted AMS structure: " + sName + " lock is invalid: " + err;
        }
    } else {
        lock.SetProperty(sName, {});
        std.lib.fu.putAsText(sLockFileUrl, "{}");
    }
}


function init() {
    packages.SetProperty("module", OpenCodeLibrary("lock/module.bs"))

    base_dir_url = UrlParent(UrlParent(ams.dist.FILE_URL));
    dist_dir_url = ams.dist.FILE_URL;

    data_dir_url = std.lib.fu.resolve(base_dir_url, "data");
    modules_dir_url = std.lib.fu.resolve(base_dir_url, "modules");
    temp_dir_url = std.lib.fu.resolve(base_dir_url, "temp");

    lock_ams_url = std.lib.fu.resolve(base_dir_url, "lock-ams.json");
    lock_module_url = std.lib.fu.resolve(base_dir_url, "lock-module.json");

    ams_wrapper_version = ams.wrapper.VERSION;
    ams_dist_version = ams.dist.VERSION;

    loadLockedPackageFromFile("ams", lock_ams_url);
    loadLockedPackageFromFile("module", lock_module_url);

    if (std.lib.fu.isNotExistsDir(data_dir_url)) {
        std.lib.fu.createDir(data_dir_url)
    }

    if (std.lib.fu.isNotExistsDir(modules_dir_url)) {
        std.lib.fu.createDir(modules_dir_url)
    }

    if (std.lib.fu.isNotExistsDir(temp_dir_url)) {
        std.lib.fu.createDir(temp_dir_url)
    }
}