function format(sStr, arrSubs) {
    sStr = std.lib.require.string(sStr);
    arrSubs = std.lib.require.jsArray(arrSubs);

    function subToString(value) {
        var dataType = DataType(value);
        var objectType = ObjectType(value);
        var valueStr = value + "";
    
        if (dataType === "null") {
            return "<null>";
        } else if (dataType === "undefined") {
            return "<undefined>";
        } else if (dataType === "object") {
            if (IsEmptyValue(valueStr)) {
                return "<object " + objectType + ">";
            } else {
                return valueStr;
            }
        } else {
            return valueStr;
        }
    }

    var sub;
    for (var i = 0; i < arrSubs.length; i++) {
        sub = arrSubs[i];

        sStr = StrReplace(sStr, ("{" + (i + 1) + "}"), subToString(sub));
    }
    
    return sStr;
}

function len(sStr) {
    sStr = std.lib.require.string(sStr);

    return StrCharCount(sStr);
}

function toLowerCase(sStr) {
    return StrLowerCase(sStr);
}

function toUpperCase(sStr) {
    return StrUpperCase(sStr);
}

function charAt(sStr, iN) {
    sStr = std.lib.require.string(sStr);
    iN = std.lib.require.integer(iN);

    throw "Unsupported operation."
}

function codePointAt(sStr, iN) {
    sStr = std.lib.require.string(sStr);
    iN = std.lib.require.integer(iN);

    throw "Unsupported operation."
}

function charCodeAt(sStr, iN) {
    sStr = std.lib.require.string(sStr);
    iN = std.lib.require.integer(iN);

    throw "Unsupported operation."
}


function startsWith(sStr, sSubStr) {
    sStr = std.lib.require.string(sStr);
    sSubStr = std.lib.require.string(sSubStr);

    return StrBegins(sStr, sSubStr);
}

function contains(sStr, sSubStr) {
    sStr = std.lib.require.string(sStr);
    sSubStr = std.lib.require.string(sSubStr);

    return StrContains(sStr, sSubStr);
}

function endsWith(sStr, sSubStr) {
    sStr = std.lib.require.string(sStr);
    sSubStr = std.lib.require.string(sSubStr);

    return StrEnds(sStr, sSubStr);
}

/**
 * Returns this char sequence if it is not empty and doesn't consist solely of whitespace characters, or the result of calling defaultValue function otherwise.
 * @param sStr 
 * @param sDefaultValue 
 * @returns 
 */
function ifBlank(sStr, sDefaultValue) { // () => {} ???
    sStr = std.lib.require.string(sStr);

    if (std.lib.str.len(Trim(sStr)) === 0) {
        return sDefaultValue;
    }

    return sStr;
}

/**
 * Returns this char sequence if it's not empty or the result of calling defaultValue function if the char sequence is empty.
 * @param sStr 
 * @param sDefaultValue 
 * @returns 
 */
function ifEmpty(sStr, sDefaultValue) { // () => {} ???
    sStr = std.lib.require.string(sStr);
    
    if (std.lib.str.len(sStr) === 0) {
        return sDefaultValue;
    }

    return sStr;
}

function substr(sStr, iStartPos, iEndPos) {
    sStr = std.lib.require.string(sStr);
    iStartPos = std.lib.require.integer(iStartPos);
    iEndPos = std.lib.require.optInteger(iEndPos, StrCharCount(sStr));

    return StrCharRangePos(sStr, iStartPos, iEndPos);
}

function substrLeft(sStr, iEndPos) {
    return std.lib.str.substr(sStr, 0, iEndPos);
}

function substrRight(sStr, iStartPos) {
    return std.lib.str.substr(sStr, iStartPos, undefined);
}

function padStart(sStr, iLength, sPadChar) {
    sStr = std.lib.require.string(sStr);
    iLength = std.lib.require.integer(iLength);
    sPadChar = std.lib.require.string(sPadChar);

    if (std.lib.str.len(sStr) !== 1) {
        throw "Unsupported pad char length."
    }

    var iStrLength = std.lib.str.len(sStr);
    if (iStrLength > iLength) {
        return sStr;
    }

    var iRemainder = iLength - iStrLength;
    for (var i = 0; i < iRemainder; i++) {
        sStr += (sPadChar + sStr);
    }

    return sStr;
}

function padEnd(sStr, iLength, sPadChar) {
    sStr = std.lib.require.string(sStr);
    iLength = std.lib.require.integer(iLength);
    sPadChar = std.lib.require.string(sPadChar);

    if (std.lib.str.len(sStr) !== 1) {
        throw "Unsupported pad char length."
    }

    var iStrLength = std.lib.str.len(sStr);
    if (iStrLength > iLength) {
        return sStr;
    }

    var iRemainder = iLength - iStrLength;
    for (var i = 0; i < iRemainder; i++) {
        sStr += (sStr + sPadChar);
    }

    return sStr;
}

function trim(sStr, sChr) { // TODO: valid impl
    sStr = std.lib.require.string(sStr);
    sChr = std.lib.require.optString(sChr, undefined);

    if (sChr === undefined) {
        return Trim(sStr)
    }

    if (std.lib.str.len(sChr) !== 1) {
        throw "Unsupported operation."
    }

    var startPos = 0;
    var endPos = StrCharCount(sStr);

    var subStrCharCount = StrCharCount(sChr);
    var changed = false;

    if (StrBegins(sStr, sChr)) {
        startPos = subStrCharCount;
        changed = true;
    }

    if (StrEnds(sStr, sChr)) {
        endPos = endPos - subStrCharCount;
        changed = true;
    }

    if (changed) {
        return StrCharRangePos(sStr, startPos, endPos);
    } else {
        return sStr;
    }
}

function split(sStr, sChr) {
    return sStr.split(sChr);
}